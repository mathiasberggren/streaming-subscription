//ðŸ§©Don't Edit this file.âœ¨Generated in Tue Apr 09 2024 21:19:58 GMT+0200 (Central European Summer Time)âœ¨
model Account {
  id                 Int                 @id @default(autoincrement())
  streamingService   String
  username           String              @unique
  password           String
  user               User                @relation(fields: [userId], references: [id])
  userId             Int
  subscriptionOffers SubscriptionOffer[]
}

model Actor {
  actorId   Int       @id @default(autoincrement())
  firstName String
  lastName  String
  birthDate DateTime?
  movies    Movie[]   @relation("ParticipatesIn")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id                      Int                     @id @default(autoincrement())
  name                    String
  streamingAvailabilities StreamingAvailability[]
  movieTitles             MovieTitle[]
  subtitles               Subtitle[]
}

model Movie {
  id               Int                     @id @default(autoincrement())
  director         String
  genre            String
  duration         Int
  releaseDate      DateTime
  movieTitle       MovieTitle[]
  subtitles        Subtitle[]
  ratings          Rating[]
  streamingDetails StreamingAvailability[]
  actors           Actor[]                 @relation("ParticipatesIn")
}

model MovieTitle {
  movieTitleId Int      @id @default(autoincrement())
  movieId      Int
  languageId   Int
  title        String
  Movie        Movie    @relation(fields: [movieId], references: [id])
  Language     Language @relation(fields: [languageId], references: [id])
}

model Rating {
  ratingId Int     @id @default(autoincrement())
  movieId  Int
  site     String
  rating   Float
  link     String?
  Movie    Movie   @relation(fields: [movieId], references: [id])
}

model StreamingAvailability {
  streamingId          Int                @id @default(autoincrement())
  movieId              Int
  currentAvailability  Boolean
  whenBecomesAvailable DateTime?
  whenExpires          DateTime?
  languages            Language[]
  deepLink             String?
  Movie                Movie              @relation(fields: [movieId], references: [id])
  StreamingService     StreamingService[]
}

model StreamingService {
  companyId               Int                     @id @default(autoincrement())
  companyName             String
  subscriptionOffers      SubscriptionOffer[]
  streamingAvailabilities StreamingAvailability[]
}

model SubscriptionOffer {
  subscriptionId   Int              @id @default(autoincrement())
  companyId        Int
  accountId        Int
  cost             Float
  active           Boolean
  StreamingService StreamingService @relation(fields: [companyId], references: [companyId])
  Account          Account          @relation(fields: [accountId], references: [id])
}

model Subtitle {
  languageId Int
  movieId    Int
  Language   Language @relation(fields: [languageId], references: [id])
  Movie      Movie    @relation(fields: [movieId], references: [id])

  @@id([languageId, movieId])
}

model User {
  id         Int         @id @default(autoincrement())
  watchLists Watchlist[]
  accounts   Account[]
}

model Watchlist {
  watchlistId Int    @id @default(autoincrement())
  userId      Int
  name        String
  User        User   @relation(fields: [userId], references: [id])
}
